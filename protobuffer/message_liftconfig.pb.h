/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Sat Jan 05 15:21:33 2019. */

#ifndef PB_RBK_PROTOCOL_MESSAGE_LIFTCONFIG_PB_H_INCLUDED
#define PB_RBK_PROTOCOL_MESSAGE_LIFTCONFIG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _rbk_protocol_Message_Lift_Elevation {
    int32_t ID;
    int32_t driverBrand;
    bool Inverse;
    bool haveEncoder;
    bool encoderWithMotor;
    int32_t encoderLines;
    float mmCntRatio;
    int32_t limitType;
    float toplimit;
    float bottomlimit;
    bool topDIHighTrigger;
    bool bottomDIHighTrigger;
    int32_t safeControlType;
    int32_t timeLimit;
    int32_t setSpeedPriority;
    int32_t setToLimitPriority;
    int32_t heightLimit;
/* @@protoc_insertion_point(struct:rbk_protocol_Message_Lift_Elevation) */
} rbk_protocol_Message_Lift_Elevation;

typedef struct _rbk_protocol_Message_Lift_Rotation {
    int32_t ID;
    int32_t driverBrand;
    bool Inverse;
    bool haveEncoder;
    bool encoderWithMotor;
    int32_t encoderLines;
    float degreeRatio;
    int32_t setSpeedPriority;
    int32_t spinDegreePriority;
    float spinDegreeSpeed;
    int32_t spinDegreeFollowPriority;
    bool spinDegreeFollowWithZero;
    int32_t zeroPointDI;
    bool DIHighTrigger;
    float spinFollowZeroInitSpeed;
    bool spinDegreeWithZero;
/* @@protoc_insertion_point(struct:rbk_protocol_Message_Lift_Rotation) */
} rbk_protocol_Message_Lift_Rotation;

/* Default values for struct fields */

/* Initializer values for message structs */
#define rbk_protocol_Message_Lift_Elevation_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define rbk_protocol_Message_Lift_Rotation_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define rbk_protocol_Message_Lift_Elevation_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define rbk_protocol_Message_Lift_Rotation_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define rbk_protocol_Message_Lift_Elevation_ID_tag 1
#define rbk_protocol_Message_Lift_Elevation_driverBrand_tag 2
#define rbk_protocol_Message_Lift_Elevation_Inverse_tag 3
#define rbk_protocol_Message_Lift_Elevation_haveEncoder_tag 4
#define rbk_protocol_Message_Lift_Elevation_encoderWithMotor_tag 5
#define rbk_protocol_Message_Lift_Elevation_encoderLines_tag 6
#define rbk_protocol_Message_Lift_Elevation_mmCntRatio_tag 7
#define rbk_protocol_Message_Lift_Elevation_limitType_tag 8
#define rbk_protocol_Message_Lift_Elevation_toplimit_tag 9
#define rbk_protocol_Message_Lift_Elevation_bottomlimit_tag 10
#define rbk_protocol_Message_Lift_Elevation_topDIHighTrigger_tag 11
#define rbk_protocol_Message_Lift_Elevation_bottomDIHighTrigger_tag 12
#define rbk_protocol_Message_Lift_Elevation_safeControlType_tag 13
#define rbk_protocol_Message_Lift_Elevation_timeLimit_tag 14
#define rbk_protocol_Message_Lift_Elevation_setSpeedPriority_tag 15
#define rbk_protocol_Message_Lift_Elevation_setToLimitPriority_tag 16
#define rbk_protocol_Message_Lift_Elevation_heightLimit_tag 17
#define rbk_protocol_Message_Lift_Rotation_ID_tag 1
#define rbk_protocol_Message_Lift_Rotation_driverBrand_tag 2
#define rbk_protocol_Message_Lift_Rotation_Inverse_tag 3
#define rbk_protocol_Message_Lift_Rotation_haveEncoder_tag 4
#define rbk_protocol_Message_Lift_Rotation_encoderWithMotor_tag 5
#define rbk_protocol_Message_Lift_Rotation_encoderLines_tag 6
#define rbk_protocol_Message_Lift_Rotation_degreeRatio_tag 7
#define rbk_protocol_Message_Lift_Rotation_setSpeedPriority_tag 8
#define rbk_protocol_Message_Lift_Rotation_spinDegreePriority_tag 9
#define rbk_protocol_Message_Lift_Rotation_spinDegreeSpeed_tag 10
#define rbk_protocol_Message_Lift_Rotation_spinDegreeFollowPriority_tag 11
#define rbk_protocol_Message_Lift_Rotation_spinDegreeFollowWithZero_tag 12
#define rbk_protocol_Message_Lift_Rotation_zeroPointDI_tag 13
#define rbk_protocol_Message_Lift_Rotation_DIHighTrigger_tag 14
#define rbk_protocol_Message_Lift_Rotation_spinFollowZeroInitSpeed_tag 15
#define rbk_protocol_Message_Lift_Rotation_spinDegreeWithZero_tag 16

/* Struct field encoding specification for nanopb */
extern const pb_field_t rbk_protocol_Message_Lift_Elevation_fields[18];
extern const pb_field_t rbk_protocol_Message_Lift_Rotation_fields[17];

/* Maximum encoded size of messages (where known) */
#define rbk_protocol_Message_Lift_Elevation_size 126
#define rbk_protocol_Message_Lift_Rotation_size  105

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGE_LIFTCONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
