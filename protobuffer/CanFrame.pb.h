/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Tue Jun 06 21:34:09 2017. */

#ifndef PB_CANFRAME_PB_H_INCLUDED
#define PB_CANFRAME_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _DIRE_ENUM {
    DIRE_ENUM_RX = 0,
    DIRE_ENUM_TX = 1
} DIRE_ENUM;
#define _DIRE_ENUM_MIN DIRE_ENUM_RX
#define _DIRE_ENUM_MAX DIRE_ENUM_TX
#define _DIRE_ENUM_ARRAYSIZE ((DIRE_ENUM)(DIRE_ENUM_TX+1))

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(8) CanFrame_Data_t;
typedef struct _CanFrame {
    uint32_t ID;
    bool Extended;
    bool Remote;
    uint32_t DLC;
    CanFrame_Data_t Data;
    uint32_t Channel;
    uint32_t Timestamp;
    bool Direction;
/* @@protoc_insertion_point(struct:CanFrame) */
} CanFrame;

/* Default values for struct fields */

/* Initializer values for message structs */
#define CanFrame_init_default                    {0, 0, 0, 0, {0, {0}}, 0, 0, 0}
#define CanFrame_init_zero                       {0, 0, 0, 0, {0, {0}}, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define CanFrame_ID_tag                          1
#define CanFrame_Extended_tag                    2
#define CanFrame_Remote_tag                      3
#define CanFrame_DLC_tag                         4
#define CanFrame_Data_tag                        5
#define CanFrame_Channel_tag                     6
#define CanFrame_Timestamp_tag                   7
#define CanFrame_Direction_tag                   8

/* Struct field encoding specification for nanopb */
extern const pb_field_t CanFrame_fields[9];

/* Maximum encoded size of messages (where known) */
#define CanFrame_size                            40

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CANFRAME_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
