/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Sat Aug 05 15:55:57 2017. */

#ifndef PB_RBK_PROTOCOL_MESSAGE_IPCONFIG_PB_H_INCLUDED
#define PB_RBK_PROTOCOL_MESSAGE_IPCONFIG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(4) rbk_protocol_Message_ipconfig_ip_t;
typedef PB_BYTES_ARRAY_T(4) rbk_protocol_Message_ipconfig_subnet_mask_t;
typedef PB_BYTES_ARRAY_T(4) rbk_protocol_Message_ipconfig_gateway_t;
typedef PB_BYTES_ARRAY_T(6) rbk_protocol_Message_ipconfig_mac_addr_t;
typedef struct _rbk_protocol_Message_ipconfig {
    rbk_protocol_Message_ipconfig_ip_t ip;
    rbk_protocol_Message_ipconfig_subnet_mask_t subnet_mask;
    rbk_protocol_Message_ipconfig_gateway_t gateway;
    rbk_protocol_Message_ipconfig_mac_addr_t mac_addr;
    bool save_to_flash;
/* @@protoc_insertion_point(struct:rbk_protocol_Message_ipconfig) */
} rbk_protocol_Message_ipconfig;

/* Default values for struct fields */

/* Initializer values for message structs */
#define rbk_protocol_Message_ipconfig_init_default {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, 0}
#define rbk_protocol_Message_ipconfig_init_zero  {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define rbk_protocol_Message_ipconfig_ip_tag     1
#define rbk_protocol_Message_ipconfig_subnet_mask_tag 2
#define rbk_protocol_Message_ipconfig_gateway_tag 3
#define rbk_protocol_Message_ipconfig_mac_addr_tag 4
#define rbk_protocol_Message_ipconfig_save_to_flash_tag 5

/* Struct field encoding specification for nanopb */
extern const pb_field_t rbk_protocol_Message_ipconfig_fields[6];

/* Maximum encoded size of messages (where known) */
#define rbk_protocol_Message_ipconfig_size       28

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGE_IPCONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
